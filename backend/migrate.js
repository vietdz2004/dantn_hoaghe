/**
 * Migration Script - Th√™m c·ªôt trangThai v√† d·ªØ li·ªáu m·∫´u
 */

require('dotenv').config();
const { sequelize } = require('./models');
const { QueryTypes } = require('sequelize');

async function runMigration() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu migration...');
    
    // Test connection
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // 1. Th√™m c·ªôt trangThai n·∫øu ch∆∞a c√≥
    try {
      console.log('üìù Th√™m c·ªôt trangThai...');
      await sequelize.query(`
        ALTER TABLE \`sanpham\` 
        ADD COLUMN \`trangThai\` VARCHAR(20) DEFAULT 'active' 
        AFTER \`id_DanhMucChiTiet\`
      `, { type: QueryTypes.RAW });
      console.log('‚úÖ ƒê√£ th√™m c·ªôt trangThai');
    } catch (error) {
      if (error.message.includes('Duplicate column name')) {
        console.log('‚ÑπÔ∏è C·ªôt trangThai ƒë√£ t·ªìn t·∫°i');
      } else {
        console.error('‚ùå L·ªói th√™m c·ªôt:', error.message);
        throw error;
      }
    }
    
    // 2. C·∫≠p nh·∫≠t t·∫•t c·∫£ s·∫£n ph·∫©m hi·ªán t·∫°i v·ªÅ tr·∫°ng th√°i active
    console.log('üìù C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m...');
    await sequelize.query(`
      UPDATE \`sanpham\` SET \`trangThai\` = 'active' WHERE \`trangThai\` IS NULL
    `, { type: QueryTypes.UPDATE });
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m hi·ªán t·∫°i');
    
    // 2.5. Th√™m c·ªôt s·ªë l∆∞·ª£ng t·ªìn kho n·∫øu ch∆∞a c√≥
    try {
      console.log('üì¶ Th√™m c·ªôt qu·∫£n l√Ω kho...');
      await sequelize.query(`
        ALTER TABLE \`sanpham\` 
        ADD COLUMN \`soLuongTon\` INT NOT NULL DEFAULT 0 COMMENT 'S·ªë l∆∞·ª£ng t·ªìn kho',
        ADD COLUMN \`soLuongToiThieu\` INT NOT NULL DEFAULT 5 COMMENT 'S·ªë l∆∞·ª£ng t·ªìn kho t·ªëi thi·ªÉu ƒë·ªÉ c·∫£nh b√°o'
      `, { type: QueryTypes.RAW });
      console.log('‚úÖ ƒê√£ th√™m c·ªôt qu·∫£n l√Ω kho');
      
      // C·∫≠p nh·∫≠t stock cho s·∫£n ph·∫©m hi·ªán t·∫°i
      console.log('üì¶ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho...');
      await sequelize.query(`
        UPDATE \`sanpham\` 
        SET 
          \`soLuongTon\` = FLOOR(RAND() * 100) + 10,
          \`soLuongToiThieu\` = 5
        WHERE \`soLuongTon\` = 0
      `, { type: QueryTypes.UPDATE });
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho');
    } catch (error) {
      if (error.message.includes('Duplicate column name')) {
        console.log('‚ÑπÔ∏è C·ªôt qu·∫£n l√Ω kho ƒë√£ t·ªìn t·∫°i');
      } else {
        console.error('‚ùå L·ªói th√™m c·ªôt kho:', error.message);
        throw error;
      }
    }
    
    // 3. Th√™m d·ªØ li·ªáu m·∫´u n·∫øu b·∫£ng tr·ªëng
    const productCount = await sequelize.query(`
      SELECT COUNT(*) as count FROM \`sanpham\`
    `, { type: QueryTypes.SELECT });
    
    console.log(`üìä S·ªë s·∫£n ph·∫©m hi·ªán t·∫°i: ${productCount[0].count}`);
    
    if (productCount[0].count === 0) {
      console.log('üì¶ Th√™m d·ªØ li·ªáu m·∫´u...');
      
      // Th√™m s·∫£n ph·∫©m m·∫´u
      await sequelize.query(`
        INSERT INTO \`sanpham\` 
        (\`maSKU\`, \`tenSp\`, \`moTa\`, \`hinhAnh\`, \`thuongHieu\`, \`gia\`, \`giaKhuyenMai\`, \`id_DanhMucChiTiet\`, \`trangThai\`) 
        VALUES 
        ('SP001', 'B√≥ hoa h·ªìng ƒë·ªè cao c·∫•p', 'B√≥ hoa h·ªìng ƒë·ªè t∆∞∆°i 12 b√¥ng, √Ω nghƒ©a t√¨nh y√™u', '/images/products/ho-hong-do.jpg', 'FlowerCorner', 450000, 399000, 1, 'active'),
        ('SP002', 'L·∫µng hoa c√∫c v√†ng', 'L·∫µng hoa c√∫c v√†ng t∆∞∆°i, mang l·∫°i ni·ªÅm vui', '/images/products/cuc-vang.jpg', 'FlowerCorner', 350000, NULL, 2, 'active'),
        ('SP003', 'Gi·ªè hoa khai tr∆∞∆°ng', 'Gi·ªè hoa ch√∫c m·ª´ng khai tr∆∞∆°ng ph√°t ƒë·∫°t', '/images/products/gio-khai-truong.jpg', 'FlowerCorner', 800000, 750000, 3, 'active'),
        ('SP004', 'B√≥ hoa tulip ƒë·ªè', 'B√≥ hoa tulip ƒë·ªè nh·∫≠p kh·∫©u H√† Lan', '/images/products/tulip-do.jpg', 'Holland Flowers', 650000, NULL, 1, 'active'),
        ('SP005', 'Hoa baby th∆°m', 'Hoa baby tr·∫Øng th∆°m ng√°t, trang tr√≠ ƒë·∫πp', '/images/products/baby-trang.jpg', 'VietFlower', 120000, 100000, 2, 'hidden'),
        ('SP006', 'Lan h·ªì ƒëi·ªáp t√≠m', 'Ch·∫≠u lan h·ªì ƒëi·ªáp t√≠m cao c·∫•p', '/images/products/lan-ho-diep.jpg', 'OrchidVN', 1200000, NULL, 4, 'active')
      `, { type: QueryTypes.INSERT });
      
      console.log('‚úÖ ƒê√£ th√™m 6 s·∫£n ph·∫©m m·∫´u');
    }
    
    // 4. Show final table structure
    const columns = await sequelize.query(`
      SHOW COLUMNS FROM \`sanpham\`
    `, { type: QueryTypes.SELECT });
    
    console.log('üìã C·∫•u tr√∫c b·∫£ng sanpham:');
    columns.forEach(col => {
      console.log(`  - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? '(nullable)' : '(not null)'} ${col.Default ? `default: ${col.Default}` : ''}`);
    });
    
    console.log('üéâ Migration ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói migration:', error);
  } finally {
    await sequelize.close();
    process.exit(0);
  }
}

// Ch·∫°y migration
runMigration(); 