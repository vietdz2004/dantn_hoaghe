const { Category, SubCategory } = require('../models');
const sequelize = require('../models/database');

// L·∫•y t·∫•t c·∫£ danh m·ª•c v·ªõi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
exports.getAll = async (req, res) => {
  try {
    console.log('üîç Getting all categories...');
    
    // L·∫•y categories v·ªõi subcategories ƒë√£ c√≥ products
    const categories = await Category.findAll({
      include: [{
        model: SubCategory,
        required: false
      }]
    });

    console.log(`üìä Found ${categories.length} categories from database`);

    // Filter v√† count products cho m·ªói category/subcategory
    const categoriesWithProducts = await Promise.all(
      categories.map(async (category) => {
        const categoryData = category.toJSON();
        
        // ‚úÖ FIXED: ƒê·ªïi t·ª´ p.trangthai = 1 th√†nh p.trangThai = 'active'
        const productCountQuery = `
          SELECT COUNT(*) as count 
          FROM sanpham p 
          JOIN danhmucchitiet sc ON p.id_DanhMucChiTiet = sc.id_DanhMucChiTiet 
          WHERE sc.id_DanhMuc = ? AND p.trangThai = 'active'
        `;
        
        const [productCount] = await category.sequelize.query(productCountQuery, {
          replacements: [category.id_DanhMuc],
          type: category.sequelize.QueryTypes.SELECT
        });

        categoryData.totalProducts = parseInt(productCount.count) || 0;
        console.log(`üìà Category "${categoryData.tenDanhMuc}": ${categoryData.totalProducts} products`);
        
        // Filter subcategories that have products
        if (categoryData.SubCategories) {
          const subcategoriesWithProducts = await Promise.all(
            categoryData.SubCategories.map(async (subcat) => {
              // ‚úÖ FIXED: ƒê·ªïi t·ª´ p.trangthai = 1 th√†nh p.trangThai = 'active'
              const subProductCountQuery = `
                SELECT COUNT(*) as count 
                FROM sanpham p 
                WHERE p.id_DanhMucChiTiet = ? AND p.trangThai = 'active'
              `;
              
              const [subProductCount] = await category.sequelize.query(subProductCountQuery, {
                replacements: [subcat.id_DanhMucChiTiet],
                type: category.sequelize.QueryTypes.SELECT
              });

              subcat.product_count = parseInt(subProductCount.count) || 0;
              console.log(`  üì¶ Subcategory "${subcat.tenDanhMucChiTiet}": ${subcat.product_count} products`);
              return subcat;
            })
          );
          
          // ‚úÖ TEMP: Kh√¥ng filter subcategories ƒë·ªÉ debug - hi·ªÉn th·ªã t·∫•t c·∫£
          categoryData.SubCategories = subcategoriesWithProducts;
        }

        return categoryData;
      })
    );

    // ‚úÖ TEMP: Kh√¥ng filter categories ƒë·ªÉ debug - hi·ªÉn th·ªã t·∫•t c·∫£
    const resultCategories = categoriesWithProducts;
    console.log(`‚úÖ Returning ${resultCategories.length} categories`);

    res.json({
      success: true,
      data: resultCategories,
      message: `L·∫•y danh s√°ch ${resultCategories.length} danh m·ª•c th√†nh c√¥ng`
    });
  } catch (error) {
    console.error('‚ùå Error in getAll categories:', error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server', 
      error: error.message 
    });
  }
};

// L·∫•y danh m·ª•c theo id
exports.getById = async (req, res) => {
  try {
    const category = await Category.findByPk(req.params.id, {
      include: [SubCategory]
    });
    if (!category) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' });
    res.json(category);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// T·∫°o m·ªõi danh m·ª•c
exports.create = async (req, res) => {
  try {
    const category = await Category.create(req.body);
    res.status(201).json(category);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// C·∫≠p nh·∫≠t danh m·ª•c
exports.update = async (req, res) => {
  try {
    const category = await Category.findByPk(req.params.id);
    if (!category) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' });
    await category.update(req.body);
    res.json(category);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// X√≥a danh m·ª•c
exports.delete = async (req, res) => {
  try {
    const category = await Category.findByPk(req.params.id);
    if (!category) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y danh m·ª•c' });
    await category.destroy();
    res.json({ message: 'ƒê√£ x√≥a danh m·ª•c' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
}; 