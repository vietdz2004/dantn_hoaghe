const { Review, OrderDetail, Product } = require('../models');

// L·∫•y t·∫•t c·∫£ ƒë√°nh gi√°
exports.getAll = async (req, res) => {
  try {
    const reviews = await Review.findAll({
      include: [
        {
          model: OrderDetail,
          include: [Product]
        }
      ]
    });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y ƒë√°nh gi√° theo id
exports.getById = async (req, res) => {
  try {
    const review = await Review.findByPk(req.params.id, {
      include: [
        {
          model: OrderDetail,
          include: [Product]
        }
      ]
    });
    if (!review) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°' });
    res.json(review);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// T·∫°o m·ªõi ƒë√°nh gi√°
exports.create = async (req, res) => {
  try {
    const { id_SanPham, noiDung, danhGiaSao } = req.body;
    
    // VALIDATION - Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!id_SanPham) {
      return res.status(400).json({
        success: false,
        message: 'id_SanPham l√† b·∫Øt bu·ªôc'
      });
    }
    
    if (!noiDung || noiDung.trim().length < 10) {
      return res.status(400).json({
        success: false,
        message: 'N·ªôi dung ƒë√°nh gi√° ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±'
      });
    }
    
    if (!danhGiaSao || danhGiaSao < 1 || danhGiaSao > 5) {
      return res.status(400).json({
        success: false,
        message: 'ƒê√°nh gi√° sao ph·∫£i t·ª´ 1-5'
      });
    }
    
    console.log('üìù Creating new review:', { id_SanPham, noiDung: noiDung.substring(0, 50) + '...', danhGiaSao });
    
    // T·∫°o ƒë√°nh gi√° m·ªõi
    const reviewData = {
      id_SanPham: parseInt(id_SanPham),
      noiDung: noiDung.trim(),
      danhGiaSao: parseInt(danhGiaSao),
      ngayDanhGia: new Date()
    };
    
    // Note: id_NguoiDung v√† id_ChiTietDH c√≥ th·ªÉ th√™m sau khi c√≥ authentication
    const review = await Review.create(reviewData);
    
    console.log('‚úÖ Review created successfully:', review.id_DanhGia);
    
    res.status(201).json({
      success: true,
      data: review,
      message: 'ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng'
    });
    
  } catch (error) {
    console.error('‚ùå Error creating review:', error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi t·∫°o ƒë√°nh gi√°', 
      error: error.message 
    });
  }
};

// C·∫≠p nh·∫≠t ƒë√°nh gi√°
exports.update = async (req, res) => {
  try {
    const review = await Review.findByPk(req.params.id);
    if (!review) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°' });
    await review.update(req.body);
    res.json(review);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// X√≥a ƒë√°nh gi√°
exports.delete = async (req, res) => {
  try {
    const review = await Review.findByPk(req.params.id);
    if (!review) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°' });
    await review.destroy();
    res.json({ message: 'ƒê√£ x√≥a ƒë√°nh gi√°' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y ƒë√°nh gi√° theo s·∫£n ph·∫©m
exports.getByProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    console.log('üîç Fetching reviews for product:', productId);
    
    // L·∫•y reviews theo id_SanPham tr·ª±c ti·∫øp
    const reviews = await Review.findAll({
      where: { id_SanPham: productId },
      order: [['ngayDanhGia', 'DESC']]
    });
    
    console.log('üìä Found reviews for product:', reviews.length);
    
    res.json({
      success: true,
      data: reviews,
      message: `T√¨m th·∫•y ${reviews.length} ƒë√°nh gi√° cho s·∫£n ph·∫©m ${productId}`
    });
  } catch (error) {
    console.error('‚ùå Error fetching product reviews:', error);
    res.status(500).json({ 
      success: false,
      message: 'L·ªói server khi l·∫•y ƒë√°nh gi√°', 
      error: error.message 
    });
  }
}; 